This is great for glowing objects, especially in dark lighting, as this material was created for a group project called terminus, a tower defense game where you have to prevent viruses from breaching the firewall, you can see the animated material in use of the play area. So, let's get started on the shader unity. I've already set up two objects with the basic unity material which will be changed to our customer down the line first off, create a standard, surface shader and rename it to standard emissive. We're going to be using this to render the base material. The top line here tells you, where is the shadow located right now, it's located under the custom tab, but if you want you can choose where it's located. By changing this string, I'm going to remove the front custom, so it will appear directly in the drop-down list. Instead, we can also see that in the current material there are already some default properties that we set up for us. However, we donate all of them so commented the glossiness and metallic properties, including all the references to them. We also won't be needing the unity instancing support either. Instead, what we do need to add other unity, pbs lighting for physically based shading, random queue of geometry under the substituted text, since we're working with an opaque object, rename all the references of main texture to albedo 2., to make the references clearer under void, surf we're also going to rename c to albedo at the same time shift the color to here. Instead, if you have worked with 3d objects before you might know that there are other textures that are added to make the object look more realistic, so we are also going to add two more properties. Normal and mass map. Textures normal maps handle the bumps and dense of a 3d material. Also put the texture inside the unpacked scale, normal function to unpack the map with a scale of 1. below it, assign the output o with the properties. So all.normal is normal for mass map, as mentioned before, assign a different channels to their respective texture, whilst map r for metallic g for occlusion b for detail mask and a for smoothness. However, we don't need the detail mask, since that is only required for very close-up details of the object. Here's also where, if you have created individual channels for any of these properties reference them here, instead of mass map going back to unity, you can see the properties have been updated with the ones we wrote and in all the textures, and you should be able to see that the material is working properly. So now we're going to move on to the exciting part, making this material, glow and animated the glow, as you might have guessed, is handled by emission just like a normal standard material. However, we're going to make it pulse so that it looks more organic and admission for the texture emission color for the color of the emission and emission intensity for the base brightness of the emission. These three properties are also found in the normal material for the pulsing. We need two more float values, emission glow for heartbreak to glow and pulsing and emission glue duration. For how long is one cycle of the pulse? For now, let's set the default amount to 1 for the glows and 5 seconds for the duration, as usual write this down here, we are also using absolute here so that the resulting glow would never be lower than the base intensity. Let's see this in action to make the housing more obvious, you can either increase the intensity or the glow based on what you need now we're going to create a new shader, but this time it's an unlit shader we're going to copy some of these components into our shader to create the passing animation so that not all parts of the texture will glow uniformly copy everything, underpass and paste it here, so that you render the surface shader before this once again, renaming texture to scrolling mask for all the references and create a property for this under the properties. Section right, click the paint bucket tool- and you will see this- this is the gradient tool, but first let me backtrack. Slightly. Transparency value is determined based on the grayscale of the texture, with black being opaque and white being transparent. Thus, as we want the ingredient for the illumination, we need the texture to have a gradient going from darker gray or black to white, so open up the color picker and then the two ends pick a darker shade, I'm going with dark gray so that the dimmer section of the material will still have a cycle coming through at the center make it white while holding shift. When you drag your mouse down to from the top to the bottom. You have this beautiful gradient, save this as a png, not by immunity. Add this to the material and you'll be able to faintly see the gradient overlay back here, create two more float properties called scroll x and scroll y with a default value of 0.2, and then I'm here too so yeah. I hope you enjoyed and there we go. The shader is complete. Let's take a look at our final product.